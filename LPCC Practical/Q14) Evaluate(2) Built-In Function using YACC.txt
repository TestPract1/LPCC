1) mathfunc.l file


%option noyywrap
%{
#include "mathfunc.tab.h"
#include <cstdlib>
%}

%%

[ \t\n]+           ; // skip whitespace
[0-9]+(\.[0-9]+)?  { yylval.fval = atof(yytext); return NUMBER; }

"="                return EQUAL;
"sin"              return SIN;
"cos"              return COS;

[a-zA-Z_][a-zA-Z0-9_]*  { yylval.sval = strdup(yytext); return IDENTIFIER; }

"("                return LPAREN;
")"                return RPAREN;
"+"                return PLUS;

%%



2) mathfunc.y file


%{
#include <iostream>
#include <cmath>
#include <cstring>
#include <string>
#include <unordered_map>
using namespace std;

extern int yylex();
void yyerror(const char *s) {
    cerr << "Error: " << s << endl;
}

unordered_map<string, double> variables;

%}

%union {
    double fval;
    char* sval;
}

%token <fval> NUMBER
%token <sval> IDENTIFIER

%token EQUAL SIN COS
%token LPAREN RPAREN PLUS

%type <fval> expr
%type <sval> varname

%%

input:
      varname EQUAL expr {
          variables[$1] = $3;
          cout << $1 << " = " << $3 << endl;
      }
    ;

varname:
      IDENTIFIER { $$ = $1; }
    ;

expr:
      expr PLUS term   { $$ = $1 + $3; }
    | term             { $$ = $1; }
    ;

term:
      SIN LPAREN expr RPAREN  { $$ = sin($3); }
    | COS LPAREN expr RPAREN  { $$ = cos($3); }
    | NUMBER                  { $$ = $1; }
    ;

%%

int main() {
    // Hardcoded input
    string input = "u = sin(12) + cos(12)";

    YY_BUFFER_STATE buffer = yy_scan_string(input.c_str());
    yyparse();
    yy_delete_buffer(buffer);

    return 0;
}



3) How to Run :

bison -d mathfunc.y       # Generates mathfunc.tab.c and mathfunc.tab.h
flex mathfunc.l           # Generates lex.yy.c
g++ mathfunc.tab.c lex.yy.c -o math_eval -lfl -lm
./math_eval
