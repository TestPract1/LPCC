Q1) Create Symbol table.

#include <iostream>
#include <sstream>
#include <vector>
#include <map>
using namespace std;

int main() {
    vector<string> code = {
        "START 100",
        "READ A",
        "READ B",
        "LOOP MOVER AREG, A",
        "     MOVER BREG, B",
        "     COMP BREG, ='2'",
        "     BC GT, LOOP",
        "BACK SUB AREG, B",
        "     COMP AREG, ='5'",
        "     BC LT, BACK",
        "     STOP",
        "A    DS 1",
        "B    DS 1",
        "     END"
    };

    map<string, int> symbolTable;
    int locationCounter = 0;

    for (const string& line : code) {
        istringstream iss(line);
        string word1, word2, word3;
        iss >> word1;

        if (word1 == "START") {
            iss >> word2;
            locationCounter = stoi(word2);
            continue;
        }

        // If first word is a label
        if (word1 != "READ" && word1 != "STOP" && word1 != "END" && word1 != "") {
            iss >> word2;
            if (word2 == "DS" || word2 == "DC" || word2 == "MOVER" || word2 == "MOVEM" || word2 == "COMP" ||
                word2 == "ADD" || word2 == "SUB" || word2 == "BC" || word2 == "DIV") {
                if (symbolTable.find(word1) == symbolTable.end()) {
                    symbolTable[word1] = locationCounter;
                }
            }
        }

        // Check for DS directive
        if (line.find("DS") != string::npos) {
            int size;
            iss >> word2 >> size;
            locationCounter += size;
        } else if (line.find("DC") != string::npos) {
            locationCounter += 1;
        } else if (word1 == "END") {
            continue;
        } else {
            locationCounter += 1;
        }
    }

    // Print symbol table
    cout << "Symbol Table:\n";
    cout << "Label\tAddress\n";
    for (auto& pair : symbolTable) {
        cout << pair.first << "\t" << pair.second << "\n";
    }

    return 0;
}


