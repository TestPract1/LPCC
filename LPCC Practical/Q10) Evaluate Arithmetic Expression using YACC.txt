1) expr.l file


%option noyywrap
%{
#include "expr.tab.h"
%}

%%

[0-9]+\.[0-9]+    { yylval.fval = atof(yytext); return NUMBER; }
[0-9]+            { yylval.fval = atof(yytext); return NUMBER; }
[+\-*/()]         { return yytext[0]; }
[ \t\n]           { /* skip whitespace */ }

%%



2) expr.y file


%{
#include <iostream>
#include <sstream>
#include <string>
using namespace std;

extern int yylex();
void yyerror(const char* s) {
    cerr << "Error: " << s << endl;
}

istringstream exprStream;
int yylex(void) {
    static string line;
    if (!getline(exprStream, line)) return 0;
    exprStream.clear();
    exprStream.str(line);
    return yylex();
}

%}

%union {
    float fval;
}

%token <fval> NUMBER

%type <fval> expr term factor

%%

input:
    expr { cout << "Result = " << $1 << endl; }
    ;

expr:
    expr '+' term  { $$ = $1 + $3; }
  | expr '-' term  { $$ = $1 - $3; }
  | term           { $$ = $1; }
  ;

term:
    term '*' factor  { $$ = $1 * $3; }
  | term '/' factor  { $$ = $1 / $3; }
  | factor           { $$ = $1; }
  ;

factor:
    NUMBER           { $$ = $1; }
  | '(' expr ')'     { $$ = $2; }
  ;

%%

int main() {
    // Hardcoded input
    string input = "1.44+22.4-12.8+11*3";
    exprStream.str(input);
    yyparse();
    return 0;
}




3) How to Run :

bison -d expr.y           # generates expr.tab.c and expr.tab.h
flex expr.l               # generates lex.yy.c
g++ expr.tab.c lex.yy.c -o expr_eval -lfl
./expr_eval
