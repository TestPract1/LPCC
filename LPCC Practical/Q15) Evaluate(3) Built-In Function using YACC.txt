1) func_eval.l file


%option noyywrap
%{
#include "func_eval.tab.h"
#include <cstdlib>
%}

%%

[ \t\n]+                 ; // Skip whitespace
[0-9]+(\.[0-9]+)?        { yylval.fval = atof(yytext); return NUMBER; }

"="                      return EQUAL;
"pow"                    return POW;
"log"                    return LOG;
","                      return COMMA;
"/"                      return DIV;

[a-zA-Z_][a-zA-Z0-9_]*    { yylval.sval = strdup(yytext); return IDENTIFIER; }

"("                      return LPAREN;
")"                      return RPAREN;

%%



2) func_eval.y file


%{
#include <iostream>
#include <cmath>
#include <cstring>
#include <string>
#include <unordered_map>
using namespace std;

extern int yylex();
void yyerror(const char *s) {
    cerr << "Error: " << s << endl;
}

unordered_map<string, double> variables;

%}

%union {
    double fval;
    char* sval;
}

%token <fval> NUMBER
%token <sval> IDENTIFIER

%token EQUAL POW LOG COMMA DIV
%token LPAREN RPAREN

%type <fval> expr term
%type <sval> varname

%%

input:
    varname EQUAL expr {
        variables[$1] = $3;
        cout << $1 << " = " << $3 << endl;
    }
    ;

varname:
    IDENTIFIER { $$ = $1; }
    ;

expr:
    expr DIV term     { $$ = $1 / $3; }
  | term              { $$ = $1; }
    ;

term:
    POW LPAREN expr COMMA expr RPAREN { $$ = pow($3, $5); }
  | LOG LPAREN expr RPAREN            { $$ = log($3); }
  | NUMBER                            { $$ = $1; }
    ;

%%

int main() {
    // Hardcoded input
    string input = "p = pow(3,2) / log(24)";

    YY_BUFFER_STATE buffer = yy_scan_string(input.c_str());
    yyparse();
    yy_delete_buffer(buffer);

    return 0;
}



3) How to Run :

bison -d func_eval.y           # Generates func_eval.tab.c and func_eval.tab.h
flex func_eval.l               # Generates lex.yy.c
g++ func_eval.tab.c lex.yy.c -o func_eval -lfl -lm
./func_eval
